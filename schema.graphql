scalar DateTime

type Query {
    me: User
    totalPhotos: Int
    allPhotos(after: DateTime): [Photo!]!
    totalUsers: Int!
    allUsers: [User!]!
}

type Mutation {
    postPhoto(input: PostPhotoInput!): Photo!
    githubAuth(code: String!): AuthPayload!
}

type AuthPayload {
    token: String!
    user: User!
}

type User {
    userId: ID!
    githubLogin: ID!
    githubToken: String!
    name: String
    avatar: String
    postedPhotos: [Photo!]!
}

type Photo {
    photoId: ID!
    url: String
    name: String!
    description: String
    category: PhotoCategory
    userId: String
    postedBy: User
}

enum PhotoCategory {
    SELFIE
    PORTRAIT
    ACTION
    LANDSCAPE
    GRAPHIC
}

input PostPhotoInput {
    name: String!
    category: PhotoCategory = PORTRAIT
    description: String
}
